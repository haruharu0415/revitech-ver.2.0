package com.example.revitech.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

// 【追加】ロギングのためのインポート
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.revitech.entity.ChatMember;
import com.example.revitech.entity.ChatRoom;
import com.example.revitech.repository.ChatMemberRepository;
import com.example.revitech.repository.ChatRoomRepository;

@Service
@Transactional
public class ChatRoomService {

    // 【追加】ロガーの定義
    private static final Logger logger = LoggerFactory.getLogger(ChatRoomService.class);

    private final ChatRoomRepository chatRoomRepository;
    private final ChatMemberRepository chatMemberRepository;

    @Autowired
    public ChatRoomService(ChatRoomRepository chatRoomRepository, ChatMemberRepository chatMemberRepository) {
        this.chatRoomRepository = chatRoomRepository;
        this.chatMemberRepository = chatMemberRepository;
    }

    // 2人のユーザー間のDMルーム取得または作成
    public ChatRoom getOrCreateDmRoom(Long userId1, Long userId2) {
        
        logger.info("Attempting to get or create DM room between {} and {}", userId1, userId2);

        // 1. 既存のDMルームを検索 (カスタムクエリを使用)
        Optional<ChatRoom> existingRoom = chatRoomRepository.findExistingDmRoom(userId1, userId2);

        // 2. 既存のルームがあればそれを返す
        if (existingRoom.isPresent()) {
            logger.info("Existing DM room found: {}", existingRoom.get().getId());
            return existingRoom.get(); 
        }

        // 3. 既存のルームがなければ新規DMルームを作成し保存
        logger.info("No existing DM room found. Creating a new one.");
        ChatRoom newRoom = new ChatRoom();
        newRoom.setName(null);
        newRoom.setType("DM");
        // DBのNOT NULL制約に対応するため、DMでもuserId1をcreatorとして設定
        newRoom.setCreatarUserId(userId1); 

        try {
            // RoomをDBに保存
            newRoom = chatRoomRepository.save(newRoom);
            
            // 【重要】IDが採番されているか確認
            if (newRoom.getId() == null) {
                // IDが取得できない場合は、データベースの設定（IDENTITYなど）に問題がある可能性
                logger.error("Failed to get ID after saving new ChatRoom. DB save may have failed silently.");
                throw new RuntimeException("ChatRoom ID was not generated by the database.");
            }
            logger.info("New ChatRoom created with ID: {}", newRoom.getId());

            // 4. メンバーテーブルに両ユーザーを追加
            chatMemberRepository.save(new ChatMember(newRoom.getId(), userId1));
            chatMemberRepository.save(new ChatMember(newRoom.getId(), userId2));
            
            return newRoom;
            
        } catch (Exception e) {
            // エラーが発生した場合、ログを出力し、RuntimeExceptionを投げる
            // これにより、エラーがコンソールに確実に出力されるようになる
            logger.error("FATAL: Failed to create new DM Room or add members: {}", e.getMessage(), e);
            throw new RuntimeException("DM Room creation failed due to database error. Check logs for SQL exception.", e);
        }
    }
    
    // ... (他のメソッドは省略) ...
    public List<ChatRoom> getAllRooms() {
        return chatRoomRepository.findAll();
    }
    
    public Optional<ChatRoom> getRoomById(Long roomId) {
        return chatRoomRepository.findById(roomId);
    }

    public List<ChatRoom> getRoomsForUser(Long userId) {
        List<ChatMember> members = chatMemberRepository.findByUserId(userId);
        List<Long> roomIds = members.stream()
            .map(ChatMember::getRoomId)
            .collect(Collectors.toList());
        return chatRoomRepository.findAllById(roomIds);
    }
    
    public ChatRoom createGroupRoom(Long creatorId, String name, List<Long> memberIds) {
        ChatRoom group = new ChatRoom();
        group.setName(name);
        group.setType("GROUP");
        group.setCreatarUserId(creatorId);
        ChatRoom savedGroup = chatRoomRepository.save(group);

        // 作成者を追加
        chatMemberRepository.save(new ChatMember(savedGroup.getId(), creatorId));
        // 他のメンバーを追加
        for (Long memberId : memberIds.stream().distinct().collect(Collectors.toList())) {
            if (!memberId.equals(creatorId)) {
                chatMemberRepository.save(new ChatMember(savedGroup.getId(), memberId));
            }
        }

        return savedGroup;
    }
}